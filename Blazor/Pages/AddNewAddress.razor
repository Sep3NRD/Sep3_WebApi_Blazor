@page "/AddNewAddress"
@using Domain.Models
@using Blazor.Services
@using Domain.DTOs
@using System.Security.Claims
@inject ICustomerService customerService;
@using Blazored.Toast.Services
@inject IToastService toastService;
@inject NavigationManager navMgr



        <div class="container mt-5">
            <div class="row justify-content-center">
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-body">
                            <h2 class="text-center mb-4">New Address</h2>
        
                            <div class="mb-3">
                                <label for="street" class="form-label">Street</label>
                                <input type="text" class="form-control" id="street" placeholder="Street" @oninput="UpdateStreet">
                            </div>
        
                            <div class="mb-3">
                                <label for="doorNumber" class="form-label">Door No.</label>
                                <input type="text" class="form-control" id="doorNumber" placeholder="DoorNo." @oninput="UpdateDoorNo">
                            </div>
        
                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <label for="zip" class="form-label">ZIP</label>
                                    <input type="text" class="form-control" id="zip" placeholder="ZIP" @oninput="UpdatePostalCode">
                                </div>
                                <div class="col-md-6">
                                    <label for="city" class="form-label">City</label>
                                    <input type="text" class="form-control" id="city" placeholder="City" @oninput="UpdateCity">
                                </div>
                            </div>
        
                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <label for="country" class="form-label">Country</label>
                                    <input type="text" class="form-control" id="country" placeholder="Country" @oninput="UpdateCountry">
                                </div>
                                <div class="col-md-6">
                                    <label for="state" class="form-label">State/Region</label>
                                    <input type="text" class="form-control" id="state" placeholder="State" @oninput="UpdateState">
                                </div>
                            </div>
        
                            <div class="mt-4 text-center">
                                <button class="btn btn-primary" @onclick="AddAddress" type="button">Add new address</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

@code {
    private Customer? customer;  // Nullable Customer object
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;  // Cascading parameter for authentication state
    private IEnumerable<Claim>? userClaims;  // Nullable collection of claims

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Retrieve authentication state
            AuthenticationState authState = await AuthState;
            ClaimsPrincipal user = authState.User;
            userClaims = user?.Claims;  // Perform null check
            Claim username = userClaims?.FirstOrDefault(c => c.Type == ClaimTypes.Name);

            if (username != null)
            {
                // If username claim exists, create a CustomerLoginDto and fetch customer data
                CustomerLoginDto dto = new CustomerLoginDto(username.Value, "");
                customer = await customerService.GetByUsernameAsync(dto);
            }
        }
        catch (Exception e)
        {
            toastService.ShowError("Something went wrong");
            Console.WriteLine(e);  // Log exception
        }
    }
    

    // Method to update customer profile
    private async Task AddAddress()
    {
        Customer customerCheck = this.customer;
        
        Claim username = userClaims?.FirstOrDefault(c => c.Type == ClaimTypes.Name);
        try
        {
            AddNewAddressDTO dto = new AddNewAddressDTO()
            {
                username = username.Value,
                Street = customer.Address.Street,
                City = customer.Address.City,
                DoorNumber = customer.Address.DoorNumber,
                PostalCode = customer.Address.PostalCode,
                State = customer.Address.State,
                Country = customer.Address.Country

            };
                // Update customer data through the service
                await customerService.AddNewAddress(dto);
                toastService.ShowSuccess("New address has been added");
                navMgr.NavigateTo("/ManageProfile");
            
            
        }
        catch (Exception e)
        {
            toastService.ShowError(e.Message);  // Display error message
        }
    }

    // Methods to update customer properties based on user input
    private void UpdateCity(ChangeEventArgs e)
    {
        customer.Address.City = e.Value.ToString();
    }

    private void UpdatePostalCode(ChangeEventArgs e)
    {
        try
        {
            customer.Address.PostalCode = Convert.ToInt32(e.Value.ToString());
        }
        catch (Exception a)
        {
            Console.WriteLine(a);
            toastService.ShowError("ZIP needs to be a number");
        }
        
    }

    private void UpdateDoorNo(ChangeEventArgs e)
    {
        try
        {
            customer.Address.DoorNumber = Convert.ToInt32(e.Value.ToString());
        }
        catch (Exception a)
        {
            Console.WriteLine(a);
            toastService.ShowError("DoorNo. needs to be a number");
        }
       
    }

    private void UpdateStreet(ChangeEventArgs e)
    {
        customer.Address.Street = e.Value.ToString();
    }

    private void UpdateLastName(ChangeEventArgs e)
    {
        customer.LastName = e.Value.ToString();
    }

    private void UpdateFirstName(ChangeEventArgs e)
    {
        customer.FirstName = e.Value.ToString();
    }

    private void UpdateCountry(ChangeEventArgs e)
    {
        customer!.Address.Country = e.Value.ToString();
    }

    private void UpdateState(ChangeEventArgs e)
    {
        customer.Address.State = e.Value.ToString();
    }

    private void UpdatePassword(ChangeEventArgs e)
    {
        customer.Password = e.Value.ToString();
    }
}