@page "/CreateItem"

@using Domain.Models
@using IItemService = Blazor.Services.Interfaces.IItemService
@inject IItemService itemService
@inject NavigationManager navMgr
@using Blazored.Toast.Services
@inject IToastService toastService;


<AuthorizeView Roles="admin">
    <h3>Create a new Item.</h3>
    <div class="field">
        <label style="text-align:center;" >Item name:</label>
        <input type="text" @bind="ItemName" />
    </div>
    <div class="field">
            <label style="text-align:center; ">Description:</label>
        <textarea type="text" @bind="ItemDescription" @oninput="UpdateDescriptionCharCount"></textarea>  
        <div style="color: #888; font-size: 12px;">
                Characters: <span id="currentCharCount">@ItemDescription.Length</span> / @MaxDescriptionLength
            </div>
    </div>
    <div class="field">
        <label style="text-align: center">Category:</label>
        <select @bind="ItemCategory">
            <option value="">Select Category</option>
            <option value="CPU">CPU</option>
            <option value="GPU">GPU</option>
            <option value="Motherboard">Motherboard</option>
            <option value="RAM">RAM</option>
            <option value="CPU Cooler">CPU Cooler</option>
            <option value="SSD">SSD</option>
            <option value="HDD">HDD</option>
            <option value="PSU">PSU</option>
            <option value="Case">Case</option>
            <option value="Pre-Built">Pre-Built</option>
        </select>
    </div>
    
    <div class="field">
        <label style="text-align: center">Price:</label>
        <input type="text" @bind="ItemPrice" />
    </div>
    <div class="field">
        <label style="text-align: center">Stock:</label>
        <input type="text" @bind="ItemStock" />
    </div>
    @if (!string.IsNullOrEmpty(msg))
    {
        <div class="field">
            <label style="color: red">
                @msg
            </label>
        </div>
    }

    <div class="field">
        <button class="createbtn" @onclick="Create">Create</button>
    </div>

</AuthorizeView>


@code {
    
    // Declare private fields for item properties
    private string ItemName = "";
    private string? ItemDescription = "";
    private string? ItemCategory = "";
    private double ItemPrice;
    private int ItemStock = 0;
    private string msg = "";
    private int MaxDescriptionLength = 250;

    // Method to create a new item
    private async Task Create()
    {
    // Check if ItemName is empty
        if (string.IsNullOrEmpty(ItemName))
        {
            msg = "Name cannot be empty!";
            return;
        }

    // Check if ItemPrice is not set
        if (ItemPrice == null)
        {
            msg = "Price cannot be empty!";
            return;
        }

        try
        {
    // Create a new item with provided properties
            Item item = new Item(ItemName, ItemDescription, ItemCategory, ItemPrice, ItemStock);

    // Call the item service to create the item asynchronously
            await itemService.CreateAsync(item);

    // Show success message using toast service
            toastService.ShowSuccess("Item created: " + item.Name);

    // Navigate to the AdminViewItems page
            navMgr.NavigateTo("/AdminViewItems");
        }
        catch (Exception e)
        {
    // Handle exceptions and set error message
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    // Method to update the character count for item description
    private void UpdateDescriptionCharCount(ChangeEventArgs e)
    {
    // Update ItemDescription with the new value from the UI
        ItemDescription = e.Value.ToString();

    // Check if the length of ItemDescription exceeds the maximum allowed length
        if (ItemDescription.Length > MaxDescriptionLength)
        {
            Console.WriteLine("Exceeded max character count!");
        }
    }
}