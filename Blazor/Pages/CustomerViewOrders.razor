@page "/CustomerViewOrders"
@using Domain.Models
@using Blazor.Services.Interfaces
@using Domain.DTOs
@using System.Security.Claims
@using Blazor.Services
@inject IOrderService orderservice;
@inject ICustomerService customerService;
<h3>My Orders</h3>

@if (ownerOrders == null)
{
    <p>Loading...</p>
}
else if (!ownerOrders.Any())
{
    <p>No Orders to display</p>
}
else
    
{
    <table class="item-table">
        <thead>
        <tr>
            <th>Products</th>
            <th>Total Amount</th>
            <th>Order Date</th>
            <th>Delivery Date</th>
            <th>Status</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var order in ownerOrders)
        {
            <tr>
                <td>@(new MarkupString(order.ItemNames()))</td>
                <td>@order.TotalPrice</td>
                <td>@order.OrderDate</td>
                <td>@order.DeliveryDate</td>
                <td>@GetConfirmationStatus(order.IsConfirmed)</td>
            </tr>
        }
        </tbody>
    </table>
}


@code {
     private IEnumerable<Order>? orders;
    private IEnumerable<Order>? ownerOrders;
    private string status = "";
    private string msg = "";
    private Customer currentCustomer;
    
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    private IEnumerable<Claim> userClaims;
    
    private string GetConfirmationStatus(bool isConfirmed)
    {
        if(isConfirmed)
        {
            return "Order Processed";
        }
        else
        {
            return "Pending Confirmation";
        }
    }
    
    
    


    protected override async Task OnInitializedAsync()
    {
        try
        {
            GetCurrentCustomer();
            var allOrders = await orderservice.GetAllAsync();
            orders = FilterOwnerOrders(allOrders);
            UpdateOwnerOrders();
            
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
    
    

    private List<Order> FilterOwnerOrders(IEnumerable<Order> allOrders)
    {
        
        return allOrders
            .Where(order => order.Customer.Id == currentCustomer.Id)
            .ToList();
    }
    
    private void UpdateOwnerOrders()
    {
        ownerOrders = orders.ToList();
    }
    
    private async Task<Customer> GetCurrentCustomer()
    {
        Customer customer1 = null;
        try
        {
            AuthenticationState authState = await AuthState;
            ClaimsPrincipal user = authState.User;
            userClaims = user?.Claims;
            
            Claim usernameClaim = userClaims?.FirstOrDefault(c => c.Type == ClaimTypes.Name);

            if (usernameClaim != null)
            {
                CustomerLoginDto dto = new CustomerLoginDto(usernameClaim.Value, "");
                customer1 = await customerService.GetByUsernameAsync(dto);
                currentCustomer = customer1;

            }
        }
        catch (Exception e)
        {
            Console.WriteLine($"Error in OnInitializedAsync: {e.Message}");
        }
        return customer1;
    }

    
    
}