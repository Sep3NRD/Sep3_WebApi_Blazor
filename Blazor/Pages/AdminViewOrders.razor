@page "/AdminViewOrders"
@using Domain.Models
@using Blazored.Toast.Services
@using Blazor.Services.Interfaces
@inject IToastService toastService;
@inject IOrderService orderservice;
@inject NavigationManager NavigationManager
@using Components

<AuthorizeView Roles="admin">
<h3>AdminViewOrders</h3>


<div class = "search-bar">
    <select @bind="filter">
            <option value="">All</option>
            <option value="DeliveryDate">Delivery Date</option>
            <option value="Confirmation">Confirmation</option>
        </select>
    <button @onclick="Search">Search</button>
</div>

@if (orders == null)
{
    <p>Loading...</p>
}
else if (!orders.Any())
{
    <p>No Orders to display</p>
}
else
{
    <table class="item-table">
        <thead>
        <tr>
            <th>Customer username</th>
            <th>Address</th>
            <th>Id</th>
            <th>Is confirmed</th>
            <th class="managecol">Manage</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var order in filteredOrders)
        {
            <tr>
                <td>@order.Customer.UserName</td>
                <td>@order.Address.ToString()</td>
                <td>@order.Id</td>
                <td>@order.IsConfirmed</td>
                <td>
                    <button class="manage" @onclick="(e) => OpenManage(order.Id)">Details</button>
                    <button class="Confirm" @onclick="(e) => ConfirmOrder(order)">Confirm</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@if (showModal)
{
    <Modal ShowModal="showModal">
        <div class="card">
            @if (selectedoOrder != null)
            {
                <h3>Order id : @selectedoOrder.Id</h3>
                <div class="form-group field">
                    <div class="field">
                        <label style="text-align: center">Customer Name:</label>
                        <p>@selectedoOrder.Customer.FirstName</p>
                        <p>@selectedoOrder.Customer.LastName</p>
                    </div>
                    <div class="field">
                        <label style="text-align: center">Order Date:</label>
                        <p>@selectedoOrder.OrderDate</p>
                    </div>
                    <div class="field">
                        <label style="text-align: center">Delivery Date:</label>
                        <p>
                            @selectedoOrder.DeliveryDate
                        </p>
                    </div>
                    <div class="field">
                        <label style="text-align: center">Is Confirmed:</label>
                        <p>@selectedoOrder.IsConfirmed</p>
                    </div>
                    <div class="field">
                        <label style="text-align: center">Items:</label>
                        @foreach (var item in selectedoOrder.Items)
                        {
                            <p>Item Name: @item.Name</p>
                            <p>Item Price: @item.Price</p>
                            <hr/>
                        }
                    </div>
                    <div class="field">
                        <label style="text-align: center">Address:</label>
                        <p>City: @selectedoOrder.Address.City</p>
                        <p>Street: @selectedoOrder.Address.Street</p>
                        <p>Postal Code: @selectedoOrder.Address.PostalCode</p>
                        <p>Door Number: @selectedoOrder.Address.DoorNumber</p>
                        <p>Country: @selectedoOrder.Address.Country</p>
                        <p>State: @selectedoOrder.Address.State</p>
                    </div>


                    <div class="field">
                        <label style="text-align: center">Total Price:</label>
                        <p>@selectedoOrder.TotalPrice</p>
                    </div>
                </div>
            }
            <div>
                <button class="btn btn-secondary close-button" @onclick="CloseModal">Close</button>
            </div>

        </div>
    </Modal>
}
    </AuthorizeView>
@code
{
    // Declare private fields to store order-related data and filter criteria
    private IEnumerable<Order>? orders;
    private bool showModal = false;
    private Order selectedoOrder;
    private IEnumerable<Order>? filteredOrders;
    private string filter = "";

    //method called when the component is initialized
    protected override async Task OnInitializedAsync()
    {
        try
        {
    // Retrieve all orders asynchronously
            orders = await orderservice.GetAllAsync();

    // Initialize filteredOrders with all orders
            filteredOrders = orders;
        }
        catch (Exception e)
        {
    // Handle exceptions and show an error toast message
            Console.WriteLine(e);
            toastService.ShowError("Something went wrong!");
        }
    }

    // Method to open the order management modal
    private void OpenManage(int orderId)
    {
        try
        {
    // Find the order with the given ID
            Order order = orders.FirstOrDefault(o => o.Id == orderId);

            if (order != null)
            {
    // Set the selected order and show the modal
                selectedoOrder = order;
                showModal = true;
            }
            else
            {
    // Show an error toast message if the order is not found
                toastService.ShowError($"Order with ID {orderId} not found");
            }
        }
        catch (Exception e)
        {
    // Handle exceptions, hide the modal, and show an error toast message
            showModal = false;
            toastService.ShowError($"Error in OpenManage: {e.Message}");
            Console.WriteLine($"Error in OpenManage: {e.Message}");
        }
    }

    // Method to close the order management modal
    private void CloseModal()
    {
        showModal = false;
    }

    // Method to confirm an order asynchronously
    private async Task ConfirmOrder(Order order)
    {
        try
        {
            if (order.IsConfirmed)
            {
    // Show an info toast message if the order is already confirmed
                toastService.ShowInfo($"Order with ID {order.Id} is already confirmed");
            }
            else
            {
    // Confirm the order, show success toast messages, and update the UI
                await orderservice.ConfirmAsync(order.Id);
                toastService.ShowSuccess($"Order with id: {order.Id} confirmed with success");
                toastService.ShowInfo($"Expected delivery date: {CalculateExpectedDeliveryDate()}");
                StateHasChanged();

    // Force a page reload to reflect changes in the order list
                NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
            }
        }
        catch (Exception e)
        {
    // Handle exceptions and show an error toast message
            toastService.ShowError("Something went wrong");
            Console.WriteLine(e);
        }
    }

    // Method to calculate the expected delivery date (3 days from the current date)
    private string CalculateExpectedDeliveryDate()
    {
        DateTime localNow = DateTime.Now;
        DateTime expectedDelivery = localNow.AddDays(3);

    // Format the date according to your preference
        return expectedDelivery.ToString("yyyy-MM-dd");
    }

    // Method to filter orders based on the selected criteria
    private void Search()
    {
        if (!string.IsNullOrEmpty(filter))
        {
            switch (filter)
            {
    // Order by delivery date in descending order
                case "DeliveryDate":
                    filteredOrders = orders.OrderByDescending(o => o.DeliveryDate).ToList();
                    break;

    // Filter orders that are not confirmed
                case "Confirmation":
                    filteredOrders = orders.Where(o => !o.IsConfirmed).ToList();
                    break;
            }
        }
        else
        {
    // If filter is empty, reset to the original list of orders.
            filteredOrders = orders.ToList();
        }

    // Update the UI after filtering
        StateHasChanged();
    }
}