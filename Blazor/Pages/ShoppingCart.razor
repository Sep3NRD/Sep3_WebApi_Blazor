@page "/ShoppingCart"
@using Blazor.Services.Interfaces

@using Domain.Models
@inject IShoppingCartService shoppingCartService
@inject IOrderService orderService

@using Blazored.Toast.Services

@using Blazor.Services
@using System.Security.Claims
@using Domain.DTOs
@inject IToastService toastService;

@inject ICustomerService customerService;


<div class="cart-title-container">
    <div class="cart-title">
        <h2>Shopping Cart</h2>
    </div>
    
</div>


@if (cartItems == null || cartItems.Count <= 0)
    {
        <span>You have no items in your cart.</span>
    }
    else
    {
        <div>
            @foreach (var item in cartItems)
            {
                <div class="item-container">
                    <div class="item-name">
                        <h5>@item.Name</h5>
                        <span>@item.Description</span><br />
                        
                        <button class="btn-delete" @onclick="@(() => DeleteItem(item))">Delete</button>
                    </div>
                    <div>Quantity: @((item.quantity))</div>
                    <div class="item-price">$@((item.Price))</div>
                </div>
            }
            <div class="item-price">
                Total (@cartItems.Count): $@GetTotalPrice()
            </div>
             <button class="order-button"  @onclick="OpenAddresses">Order</button>
        </div>
    }

@if (showModal)
{
    <Modal ShowModal="showModal">
        <div class="modal" style="display: block;">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Select an Address</h5>
                        <button type="button" class="btn-close" @onclick="CloseModal"></button>
                    </div>
                    <div class="modal-body">
                        @foreach (var address in addresses)
                        {
                            <div class="card mb-3">
                                <div class="card-body">
                                    <div class="form-group">
                                        <label>Street:</label>
                                        <p>@address.Street</p>
                                    </div>
                                    <div class="form-group">
                                        <label>City:</label>
                                        <p>@address.City</p>
                                    </div>
                                    <div class="form-group">
                                        <label>Door Number:</label>
                                        <p>@address.DoorNumber</p>
                                    </div>
                                    <div class="form-group">
                                        <label>Country:</label>
                                        <p>@address.Country</p>
                                    </div>
                                    <div class="form-group">
                                        <label>State:</label>
                                        <p>@address.State</p>
                                    </div>
                                    <div class="form-group">
                                        <label>Postal Code:</label>
                                        <p>@address.PostalCode</p>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </Modal>


@code {

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    private bool showModal;
    private IEnumerable<Claim> userClaims;
    List<Item> cartItems = new List<Item>();
    private IEnumerable<Address>? addresses;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        userClaims = user?.Claims;

        Claim usernameClaim = userClaims?.FirstOrDefault(c => c.Type == ClaimTypes.Name);
        if (firstRender)
        {
            cartItems = await shoppingCartService.GetAllItems();
            addresses = await customerService.GetAddressesByUsername(usernameClaim.Value);
            StateHasChanged();
        }
    }

    private void CloseModal()
    {
        showModal = false;
    }


    private async Task PlaceOrderAsync()
    {
    // Check if there are items in the cart before placing an order
        if (cartItems == null || cartItems.Count <= 0)
        {
            toastService.ShowError("Cannot place an order with an empty cart.");
            return;
        }


        try
        {
            Customer customer = await GetCurrentCustomer();
            CreateOrderDto dto = new CreateOrderDto()
            {
                addressId = customer.Address.id,
                Items = cartItems,
                OrderDate = DateTime.Now.ToString(),
                totalPrice = GetTotalPrice(),
                username = customer.UserName
            };

            Console.WriteLine(cartItems.FirstOrDefault().quantity);

            await orderService.CreateAsync(dto);

            await shoppingCartService.Clear();

            toastService.ShowSuccess("Order placed successfully!");

            cartItems = await shoppingCartService.GetAllItems();
        }
        catch (Exception e)
        {
    // Log the exception details
            Console.WriteLine(e);

    // Display an error message to the user
            toastService.ShowError("Failed to place the order. Please try again later.");
        }
    }


    private async Task DeleteItem(Item item)
    {
        await shoppingCartService.DeleteItem(item);
        cartItems = await shoppingCartService.GetAllItems();
        toastService.ShowSuccess("Item with name :" + item.Name + " has been deleted");
    }

    private async Task<Customer> GetCurrentCustomer()
    {
        Customer customer1 = null;
        try
        {
            AuthenticationState authState = await AuthState;
            ClaimsPrincipal user = authState.User;
            userClaims = user?.Claims;

            Claim usernameClaim = userClaims?.FirstOrDefault(c => c.Type == ClaimTypes.Name);

            if (usernameClaim != null)
            {
                CustomerLoginDto dto = new CustomerLoginDto(usernameClaim.Value, "");
                customer1 = await customerService.GetByUsernameAsync(dto);
            }
        }
        catch (Exception e)
        {
            Console.WriteLine($"Error in OnInitializedAsync: {e.Message}");
        }

        return customer1;

    }



    private double GetTotalPrice()
    {
        double totalPrice = 0;

        foreach (var item in cartItems)
        {
            totalPrice += item.Price * item.quantity;
        }

        return totalPrice;
    }

    private void OpenAddresses()
    {
        showModal = true;
    }

}
}