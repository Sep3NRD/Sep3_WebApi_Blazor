@page "/ShoppingCart"
@using Blazor.Services.Interfaces
@using Blazored.LocalStorage
@using Domain.Models
@inject IShoppingCartService shoppingCartService
@inject ISyncLocalStorageService localStorage

 @if (cartItems == null || cartItems.Count <= 0)
    {
        <span>You have no items in your cart.</span>
    }
    else
    {
        <div>
            @foreach (var item in cartItems)
            {
                <div class="item-container">
                    <div class="item-name">
                        <h5>@item.Name</h5>
                        <span>@item.Description</span><br />
                        <span>@item.Price</span><br />
                        <button class="btn-delete" @onclick="@(() => DeleteItem(item))">Delete</button>
                    </div>
                    <div class="item-price">$@(item.Price)</div>
                </div>
            }
            <div class="item-price">
                Total (@cartItems.Count): $@cartItems.Sum(item => item.Price)
            </div>
        </div>
    }
}
else
{
    <h3>Thank you for your order!</h3>
    <h4>Here's what you'll get:</h4>
    <div>
        @foreach (var item in cartItems)
        {
            <div class="item-container">
                <div class="item-name">
                    <h5>@item.Name</h5>
                    <span>@item.Description</span><br />
                </div>
                <div class="item-price">$@(item.Price)</div>
            </div>
        }
        <div class="item-price">
            Total (@cartItems.Count): $@cartItems.Sum(item => item.Price)
        </div>
    </div>
}

@code {
    List<Item> cartItems = new List<Item>();
    bool orderPlaced = false;

    protected override async Task OnInitializedAsync()
    {
        cartItems = await shoppingCartService.GetAllItems();
    }

    private async Task DeleteItem(Item item)
    {
        // await shoppingCartService.DeleteItem(item);
        cartItems = await shoppingCartService.GetAllItems();
    }

    

}