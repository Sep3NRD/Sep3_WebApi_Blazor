@page "/ShoppingCart"
@using Blazor.Services.Interfaces
@using Domain.Models
@inject IShoppingCartService shoppingCartService
@inject IOrderService orderService
@using Blazored.Toast.Services
@using Blazor.Services
@using System.Security.Claims
@using Domain.DTOs
@inject IToastService toastService;
@inject ICustomerService customerService;

<AuthorizeView Roles="customer">
<div class="cart-title-container">
    <div class="cart-title">
        <h2>Shopping Cart</h2>
    </div>

</div>


@if (cartItems == null || cartItems.Count <= 0)
{
    <span>You have no items in your cart.</span>
}
else
{
    <div>
        @foreach (var item in cartItems)
        {
            <div class="item-container">
                <div class="item-name">
                    <h5>@item.Name</h5>
                    <span>@item.Description</span><br/>

                    <button class="btn-delete" @onclick="@(() => DeleteItem(item))">Delete</button>
                </div>
                <div>Quantity: @((item.quantity))</div>
                <div class="item-price">$@((item.Price))</div>
            </div>
        }
        <div class="item-price">
            Total (@cartItems.Count): $@GetTotalPrice()
        </div>
        <button class="order-button" @onclick="OpenAddresses">Order</button>
    </div>
}

@if (showModal)
{
    <Modal ShowModal="showModal">
        <div class="modal" style="display: block;">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Select an Address</h5>
                        <button type="button" class="btn-close" @onclick="CloseModal"></button>
                    </div>
                    <div class="modal-body">
                        @foreach (var address in addresses)
                        {
                            <div class="card mb-3">
                                <div class="card-body">
                                    <div class="form-group">
                                        <label>Street:</label>
                                        <p>@address.Street</p>
                                    </div>
                                    <div class="form-group">
                                        <label>City:</label>
                                        <p>@address.City</p>
                                    </div>
                                    <div class="form-group">
                                        <label>Door Number:</label>
                                        <p>@address.DoorNumber</p>
                                    </div>
                                    <div class="form-group">
                                        <label>Country:</label>
                                        <p>@address.Country</p>
                                    </div>
                                    <div class="form-group">
                                        <label>State:</label>
                                        <p>@address.State</p>
                                    </div>
                                    <div class="form-group">
                                        <label>Postal Code:</label>
                                        <p>@address.PostalCode</p>
                                    </div>
                                    <div>
                                        <button class="order-button" @onclick="() => PlaceOrderAsync(address)">Confirm</button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </Modal>
}
</AuthorizeView>
    
@code {

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    private bool showModal;
    private IEnumerable<Claim> userClaims;
    List<Item> cartItems = new List<Item>();
    private IEnumerable<Address>? addresses;

    // Handles post-rendering tasks.
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
    // Get user authentication state
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        userClaims = user?.Claims;

    // Find the username claim
        Claim usernameClaim = userClaims?.FirstOrDefault(c => c.Type == ClaimTypes.Name);

    // Initialize data on the first render
        if (firstRender)
        {
    // Get cart items and user addresses
            cartItems = await shoppingCartService.GetAllItems();
            addresses = await customerService.GetAddressesByUsername(usernameClaim.Value);
            StateHasChanged();
        }
    }

    // Closes the modal.
    private void CloseModal()
    {
        showModal = false;
    }

    // Places an order with the provided address.
    private async Task PlaceOrderAsync(Address address)
    {
    // Check if the cart is empty
        if (cartItems == null || cartItems.Count <= 0)
        {
    // Show error and close modal
            toastService.ShowError("Cannot place an order with an empty cart.");
            showModal = false;
            return;
        }

        try
        {
    // Get the current customer and create an order DTO
            Customer customer = await GetCurrentCustomer();
            CreateOrderDto dto = new CreateOrderDto()
            {
                addressId = address.id,
                Items = cartItems,
                OrderDate = DateTime.Now.ToString(),
                totalPrice = GetTotalPrice(),
                username = customer.UserName
            };

    // Create the order
            await orderService.CreateAsync(dto);
            showModal = false;

    // Clear the shopping cart and show success message
            await shoppingCartService.Clear();
            toastService.ShowSuccess("Order placed successfully!");

    // Refresh cart items after placing the order
            cartItems = await shoppingCartService.GetAllItems();
        }
        catch (Exception e)
        {
    // Show error message
            toastService.ShowError("Failed to place the order. Please try again later.");
        }
    }

    // Deletes the specified item from the shopping cart.
    private async Task DeleteItem(Item item)
    {
    // Delete the item, refresh cart items, and show success message
        await shoppingCartService.DeleteItem(item);
        cartItems = await shoppingCartService.GetAllItems();
        toastService.ShowSuccess($"Item with name: {item.Name} has been deleted");
    }

    // Retrieves the current customer based on the authenticated user's information.
    private async Task<Customer> GetCurrentCustomer()
    {
        Customer customer = null;
        try
        {
    // Get authentication state and user claims
            AuthenticationState authState = await AuthState;
            ClaimsPrincipal user = authState.User;
            userClaims = user?.Claims;

    // Extract the username claim
            Claim usernameClaim = userClaims?.FirstOrDefault(c => c.Type == ClaimTypes.Name);

    // Get the customer using the username
            if (usernameClaim != null)
            {
                CustomerLoginDto dto = new CustomerLoginDto(usernameClaim.Value, "");
                customer = await customerService.GetByUsernameAsync(dto);
            }
        }
        catch (Exception e)
        {
    // Log error message
            Console.WriteLine($"Error in OnInitializedAsync: {e.Message}");
        }

        return customer;
    }

    // Calculates and returns the total price of items in the shopping cart.
    private double GetTotalPrice()
    {
        double totalPrice = 0;

    // Calculate the total price based on the quantity and price of each item
        foreach (var item in cartItems)
        {
            totalPrice += item.Price * item.quantity;
        }

        return totalPrice;
    }

    // Opens the modal for managing user addresses.
    private void OpenAddresses()
    {
        showModal = true;
    }

}