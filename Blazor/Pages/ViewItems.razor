@page "/ViewItems"
@using Domain.Models
@using Blazor.Services.Interfaces
@inject IItemService itemService
@inject IShoppingCartService shoppingCartService;
@using Blazored.Toast.Services
@inject IToastService toastService;
@using Components

<div class = "search-bar">
    <input type="text" @bind="searchItem" placeholder="Search items" />
    <select @bind="selectedCategory">
            <option value="">Categories</option>
            <option value="CPU">CPU</option>
            <option value="GPU">GPU</option>
            <option value="Motherboard">Motherboard</option>
            <option value="RAM">RAM</option>
            <option value="CPU Cooler">CPU Cooler</option>
            <option value="SSD">SSD</option>
            <option value="HDD">HDD</option>
            <option value="PSU">PSU</option>
            <option value="Case">Case</option>
        </select>
    <button @onclick="Search">Search</button>
</div>




<div class="item-grid">
    @if (filteredItems == null)
    {
        <p>Loading...</p>
    }
    else if (!filteredItems.Any())
    {
        <p>No Items to display</p>
    }
    else
    {
        @foreach (var item in filteredItems)
        {
            <div class="item-card">
                <img src="img/product.png" alt="@item.Name" @onclick="() => ShowItemModal(item)"/>
                <div class="item-details">
                    <h4>@item.Name</h4>
                    <p>Price: @item.Price$</p>
                    <button class="buy-button" @onclick="() => AddToCart(item)">Add To Cart</button>
                </div>
            </div>
        }
    }
</div>

@if (showModal)
{
    <ItemModal ShowModal="showModal">
        <div class="card">
            @if(selectedItem!=null)
            {
            <h3>@selectedItem.Name</h3>
            <div class="form-group field">
                 <p><strong>Description:</strong> @selectedItem.Description</p>
                <p><strong>Price:</strong> @selectedItem.Price $</p>
            </div>
            }
            @if (!string.IsNullOrEmpty(msg))
            {
                <label style="color: red">@msg</label>
            }
            <button class="btn btn-secondary close-button" @onclick="CloseModal">Close</button>
        </div>
    </ItemModal>


@if (!string.IsNullOrEmpty(msg))
{
    <label style="color: red">@msg</label>
}

@code {
    private IEnumerable<Item>? items;
    private string msg = "";
    private bool showModal;
    private Item selectedItem;
    private string searchItem = "";
    private IEnumerable<Item>? filteredItems;
    private string selectedCategory = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var allItems = await itemService.GetAsync();
            items = ExcludeItems(allItems);
            UpdateFilteredItems();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
    
    private List<Item> ExcludeItems(IEnumerable<Item> allItems)
    {
        return allItems
            .Where(item => !item.Category.Contains("Pre-Built", StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    private void ShowItemModal(Item item)
    {
        selectedItem = item;
        showModal = true;
    }

    
    private async Task AddToCart(Item item)
    {
        showModal = false;
        await shoppingCartService.AddToCart(item);
        toastService.ShowSuccess("Item added to cart" + item.Name);
    }

    private void CloseModal()
    {
        showModal = false;
    }
    
    private void Search()
    {
        filteredItems = items
            .Where(item => 
                (string.IsNullOrEmpty(selectedCategory) || item.Category.Equals(selectedCategory, StringComparison.OrdinalIgnoreCase)) &&
                item.Name.Contains(searchItem, StringComparison.OrdinalIgnoreCase)
            )
            .ToList();
        
    }
    
    private void UpdateFilteredItems()
    {
        filteredItems = items.ToList();
    }
    

}
}