@page "/ViewItems"
@using Domain.Models
@using Blazor.Services.Interfaces
@using Blazor.Pages.Components
@inject IItemService itemService
@inject IShoppingCartService shoppingCartService;
@using Blazored.Toast.Services
@inject IToastService toastService;

<h3>Items</h3>
<div class="item-grid">
    @if (items == null)
    {
        <p>Loading...</p>
    }
    else if (!items.Any())
    {
        <p>No Items to display</p>
    }
    else
    {
        @foreach (var item in items)
        {
            <div class="item-card" @onclick="() => ShowItemModal(item)">
                <img src="img/product.png" alt="@item.Name" />
                <div class="item-details">
                    <p>@item.Name</p>
                    <p>Price: @item.Price DKK</p>
                    <button class="buy-button" @onclick="() => AddToCart(item)">Buy</button>
                </div>
            </div>
        }
    }
</div>

<ItemModal/>

@if (!string.IsNullOrEmpty(msg))
{
    <label style="color: red">@msg</label>
}

@code {
    private IEnumerable<Item>? items;
    private string msg = "";
    private bool showModal = false;
    private Item selectedItem;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            items = await itemService.GetAsync();
            showModal = true;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private void ShowItemModal(Item item)
    {
        
        selectedItem = item;
        showModal = true;
    }
    private void ShowModalChanged(bool value)
    {
        showModal = value;
    }

    private async Task AddToCart(Item item)
    {
        await shoppingCartService.AddToCart(item);
        toastService.ShowSuccess("Item added to cart" + item.Name);
    }
}