@page "/ManageProfile"
@using Domain.Models
@using Blazor.Services
@using Domain.DTOs
@using System.Security.Claims
@using Components
@inject ICustomerService customerService;
@using Blazored.Toast.Services
@inject IToastService toastService;
@inject NavigationManager navMgr

<AuthorizeView Roles="customer">
@if (customer != null)
{
    <div class="container mt-5">
        <div class="row justify-content-center">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-body">
                        <h2 class="text-center mb-4">Profile Settings</h2>

                        <div class="mb-3">
                            <label for="firstName" class="form-label">Name</label>
                            <input type="text" class="form-control" id="firstName" placeholder="Firstname" value="@customer?.FirstName.Trim().TrimStart()" @oninput="UpdateFirstName">
                        </div>

                        <div class="mb-3">
                            <label for="lastName" class="form-label">Surname</label>
                            <input type="text" class="form-control" id="lastName" placeholder="Surname" value="@customer?.LastName.Trim().TrimStart()" @oninput="UpdateLastName">
                        </div>

                        <div class="mb-3">
                            <label for="street" class="form-label">Street</label>
                            <input type="text" class="form-control" id="street" placeholder="Street" value="@customer?.Address.Street.Trim().TrimStart()" @oninput="UpdateStreet">
                        </div>

                        <div class="mb-3">
                            <label for="doorNumber" class="form-label">Door No.</label>
                            <input type="text" class="form-control" id="doorNumber" placeholder="DoorNo." value="@customer?.Address.DoorNumber.ToString()" @oninput="UpdateDoorNo">
                        </div>

                        <div class="mb-3">
                            <label for="zip" class="form-label">ZIP</label>
                            <input type="text" class="form-control" id="zip" placeholder="ZIP" value="@customer?.Address.PostalCode.ToString()" @oninput="UpdatePostalCode">
                        </div>

                        <div class="mb-3">
                            <label for="city" class="form-label">City</label>
                            <input type="text" class="form-control" id="city" placeholder="City" value="@customer?.Address.City" @oninput="UpdateCity">
                        </div>

                        <div class="mb-3">
                            <label for="country" class="form-label">Country</label>
                            <input type="text" class="form-control" id="country" placeholder="Country" value="@customer?.Address.Country" @oninput="UpdateCountry">
                        </div>

                        <div class="mb-3">
                            <label for="state" class="form-label">State/Region</label>
                            <input type="text" class="form-control" id="state" placeholder="State" value="@customer?.Address.State" @oninput="UpdateState">
                        </div>

                        <div class="mb-3">
                            <label for="password" class="form-label">Password</label>
                            <input type="password" class="form-control" id="password" placeholder="Password" value="" @oninput="UpdatePassword">
                        </div>

                        <div class="d-grid gap-2">
                            <button class="btn btn-primary" @onclick="UpdateProfile" type="button">Save Profile</button>
                            <button class="btn btn-primary" @onclick="NavigateToAddNewAddress" type="button">Add new address</button>
                            <button class="btn btn-primary" @onclick="OpenShowModal" type="button">See other addresses</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
</AuthorizeView>
@if (showModal)
{
    <Modal ShowModal="showModal">
        <div class="modal" style="display: block;">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Addresses</h5>
                        <button type="button" class="btn-close" @onclick="CloseModal"></button>
                    </div>
                    <div class="modal-body">
                        @foreach (var address in addresses)
                        {
                            <div class="card mb-3">
                                <div class="card-body">
                                    <div class="form-group">
                                        <label>Street:</label>
                                        <p>@address.Street</p>
                                    </div>
                                    <div class="form-group">
                                        <label>City:</label>
                                        <p>@address.City</p>
                                    </div>
                                    <div class="form-group">
                                        <label>Door Number:</label>
                                        <p>@address.DoorNumber</p>
                                    </div>
                                    <div class="form-group">
                                        <label>Country:</label>
                                        <p>@address.Country</p>
                                    </div>
                                    <div class="form-group">
                                        <label>State:</label>
                                        <p>@address.State</p>
                                    </div>
                                    <div class="form-group">
                                        <label>Postal Code:</label>
                                        <p>@address.PostalCode</p>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </Modal>
}
    
@code {
    private Customer? customer; // A Customer object

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!; // Cascading parameter for authentication state

    private IEnumerable<Claim>? userClaims; // Nullable collection of claims
    private bool showModal = false;
    private IEnumerable<Address>? addresses; //List of addresses that belong to a Customer

    protected override async Task OnInitializedAsync()
    {
        try
        {
    // Retrieve authentication state
            AuthenticationState authState = await AuthState;
            ClaimsPrincipal user = authState.User;
            userClaims = user?.Claims; // Perform null check
            Claim username = userClaims?.FirstOrDefault(c => c.Type == ClaimTypes.Name);

            if (username != null)
            {
    // If username claim exists, create a CustomerLoginDto and fetch customer data
                CustomerLoginDto dto = new CustomerLoginDto(username.Value, "");
                customer = await customerService.GetByUsernameAsync(dto);
            }
        }
        catch (Exception e)
        {
            toastService.ShowError("Something went wrong");
            Console.WriteLine(e); // Log exception
        }
    }

    //Method to navigate to the page to add a new address
    private void NavigateToAddNewAddress()
    {
        navMgr.NavigateTo("/AddNewAddress");
    }

    //Method to open all the addresses that belong to a specific Customer
    private async Task OpenShowModal()
    {
        Claim username = userClaims?.FirstOrDefault(c => c.Type == ClaimTypes.Name);
        //Get the addresses based on customer username
        addresses =await customerService.GetAddressesByUsername(username.Value);
        
        showModal = true;
    }

    // Method to update customer profile
    private async Task UpdateProfile()
    {
        try
        {
    // Update customer data through the service
            await customerService.UpdateCustomerAsync(customer);
            toastService.ShowSuccess("Your profile has been updated");
        }
        catch (Exception e)
        {
    // Display error message
            toastService.ShowError(e.Message); 
        }
    }
    //Method to close the modal
    private void CloseModal()
    {
        showModal = false;
    }

    // Methods to update customer properties based on user input
    private void UpdateCity(ChangeEventArgs e)
    {
        customer.Address.City = e.Value.ToString();
    }

    private void UpdatePostalCode(ChangeEventArgs e)
    {
        try
        {
            customer.Address.PostalCode = Convert.ToInt32(e.Value.ToString());
        }
        catch (Exception a)
        {
            Console.WriteLine(a);
            toastService.ShowError("ZIP needs to be a number");
        }
    }

    private void UpdateDoorNo(ChangeEventArgs e)
    {
        try
        {
            customer.Address.DoorNumber = Convert.ToInt32(e.Value.ToString());
        }
        catch (Exception a)
        {
            Console.WriteLine(a);
            toastService.ShowError("Door no. needs to be a number");
        }
    }

    private void UpdateStreet(ChangeEventArgs e)
    {
        customer.Address.Street = e.Value.ToString();
    }

    private void UpdateLastName(ChangeEventArgs e)
    {
        customer.LastName = e.Value.ToString();
    }

    private void UpdateFirstName(ChangeEventArgs e)
    {
        customer.FirstName = e.Value.ToString();
    }

    private void UpdateCountry(ChangeEventArgs e)
    {
        customer!.Address.Country = e.Value.ToString();
    }

    private void UpdateState(ChangeEventArgs e)
    {
        customer.Address.State = e.Value.ToString();
    }

    private void UpdatePassword(ChangeEventArgs e)
    {
        customer.Password = e.Value.ToString();
    }

}
