@page "/ManageProfile"
@using Domain.Models
@using Blazor.Services
@using Domain.DTOs
@using System.Security.Claims
@inject ICustomerService customerService;
@using Blazored.Toast.Services
@inject IToastService toastService;


@if (customer != null)
{
        <div class="row">
            <div class="col-md-3 border-right">
                <div class="p-3 py-1">
                    <div class="d-flex justify-content-between align-items-center mb-1">
                        <h4 class="text-right">Profile Settings</h4>
                    </div>
                    <div class="row mt-2">
                        <div class="col-md-12">
                            <label class="labels">Name</label>
                            <input type="text" class="form-control-md" placeholder="Firstname"  value=" @customer?.FirstName.Trim().TrimStart()" @oninput="UpdateFirstName">
                        </div>
                        <div class="col-md-12">
                            <label class="labels">Surname</label>
                            <input type="text" class="form-control-md" placeholder="Surname"  value=" @customer?.LastName.Trim().TrimStart()" @oninput="UpdateLastName">
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-md-12">
                            <label class="labels">Street</label>
                            <input type="text" class="form-control-md" placeholder="Street"  value=" @customer?.Address.Street.Trim().TrimStart()" @oninput="UpdateStreet">
                        </div>
                        <div class="col-md-12">
                            <label class="labels">Door No.</label>
                            <input type="text" class="form-control-md" placeholder="DoorNo."  value=" @customer?.Address.DoorNumber" @oninput="UpdateDoorNo">
                        </div>
                    </div>
                    <div class="row mt-12">
                        <div class="col-md-6">
                            <label class="labels">ZIP</label>
                            <input type="text" class="form-control-md" placeholder="ZIP"  value="@customer?.Address.PostalCode" @oninput="UpdatePostalCode">
                        </div>
                        <div class="col-md-12">
                            <label class="labels">City</label>
                            <input type="text" class="form-control-md" placeholder="City"  value="@customer?.Address.City" @oninput="UpdateCity">
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-md-12">
                            <label class="labels">Country</label>
                            <input type="text" class="form-control-md" placeholder="Country"  value="@customer?.Address.Country" @oninput="UpdateCountry">
                        </div>
                        <div class="col-md-12">
                            <label class="labels">State/Region</label>
                            <input type="text" class="form-control-md" placeholder="State" value="@customer?.Address.State"@oninput="UpdateState">
                        </div>
                        <div class="col-md-12">
                                                    <label class="labels">Password</label>
                                                    <input type="password" class="form-control-md" placeholder="Password" value=""@oninput="UpdatePassword">
                                                </div>
                    </div>
                    <div class="mt-5 text-center">
                        <button class="btn btn-primary profile-button" @onclick="UpdateProfile" type="button">Save Profile</button>
                    </div>
                </div>
            </div>
        </div>
}

@code {
    private Customer? customer;
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;
    private IEnumerable<Claim>? userClaims;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            AuthenticationState authState = await AuthState;
            ClaimsPrincipal user = authState.User;
            userClaims = user?.Claims;  // Perform null check
            Claim username = userClaims?.FirstOrDefault(c => c.Type == ClaimTypes.Name);

            if (username != null)
            {
                CustomerLoginDto dto = new CustomerLoginDto(username.Value, "");
                customer = await customerService.GetByUsernameAsync(dto);
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    private async Task UpdateProfile()
    {
        
        try
        {
            await customerService.UpdateCustomerAsync(customer);
            toastService.ShowSuccess("Your profile has been updated");
        }
        catch (Exception e)
        {
            toastService.ShowError(e.Message);
        }
    }


    private void UpdateCity(ChangeEventArgs e)
    {
        customer.Address.City = e.Value.ToString();

    }

    private void UpdatePostalCode(ChangeEventArgs e)
    {
        customer.Address.PostalCode = Convert.ToInt32(e.Value.ToString());
    }

    private void UpdateDoorNo(ChangeEventArgs e)
    {
        customer.Address.DoorNumber = Convert.ToInt32(e.Value.ToString());
    }

    private void UpdateStreet(ChangeEventArgs e)
    {
        customer.Address.Street = e.Value.ToString();
    }

    private void UpdateLastName(ChangeEventArgs e)
    {
        customer.LastName = e.Value.ToString();
    }

    private void UpdateFirstName(ChangeEventArgs e)
    {
        customer.FirstName = e.Value.ToString();
    }

    private void UpdateCountry(ChangeEventArgs e)
    {
        customer!.Address.Country = e.Value.ToString();
    }

    private void UpdateState(ChangeEventArgs e)
    {
        customer.Address.State = e.Value.ToString();
    }

    private void UpdatePassword(ChangeEventArgs e)
    {
        customer.Password = e.Value.ToString();
    }

}