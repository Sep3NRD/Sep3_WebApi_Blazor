@page "/AdminViewItems"
@using Domain.DTOs
@using Domain.Models
@inject IItemService itemService
@using Components
@using Blazored.Toast.Services
@using Blazor.Services.Interfaces
@inject IToastService toastService;
@inject NavigationManager navMgr

<h3>Manage Items</h3>
@if (items == null)
{
    <p>Loading...</p>
}
else if (!items.Any())
{
    <p>No Items to display</p>
}
else
{
    <table class="item-table">
        <thead>
        <tr>
            <th>Name</th>
            <th>Category</th>
            <th >Stock</th>
            <th class="managecol">Manage</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in items)
        {
            <tr>
                <td>@item.Name</td>
                <td>@item.Category</td>
                <td>@item.Stock </td>
                <td>
                    <button class="manage" @onclick="(e) => OpenManage(item.ItemId)">Manage</button>
                    <button class="delete" @onclick="(e) => Delete(item.ItemId)">Delete</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}


@if (showModal)
{
    <Modal ShowModal="showModal">
        <div class="card">
            @if (selectedItem != null)
            {
                <h3>@selectedItem.Name</h3>
                <div class="form-group field">
                    <div class="field">
                        <label style="text-align: center">Price:</label>
                        <input type="number" @bind="selectedItem.Price"/>
                    </div>
                    <div class="field">
                        <label style="text-align: center">Stock:</label>
                        <input type="number" @bind="selectedItem.Stock"/>
                    </div>
                </div>
            }
            @if (!string.IsNullOrEmpty(msg))
            {
                <label style="color: red">@msg</label>
            }
            <div>
                <button class="btn btn-secondary confirm-button" @onclick="ConfirmUpdate">Confirm</button>
                <button class="btn btn-secondary close-button" @onclick="CloseModal">Close</button>
            </div>

        </div>
    </Modal>
@code{
    private IEnumerable<Item>? items;
    private string msg = "";
    private bool showModal = false;
    private Item selectedItem;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            items = await itemService.GetAsync();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }


    private async Task OpenManage(int itemId)
    {
        msg = "";
        try
        {
            Item item = await itemService.GetItemById(itemId);
            if (item != null)
            {
                selectedItem = item;
                showModal = true;
            }
            else
            {
                Console.WriteLine($"Item with ID {itemId} not found");
            }
        }
        catch (Exception e)
        {
            showModal = false;
            Console.WriteLine($"Error in OpenManage: {e.Message}");
        }
    }

    private async Task Delete(int itemId)
    {
        msg = "";
        try
        {
            if (itemId != null)
            {
                await itemService.DeleteItem(itemId);
            }
            else
            {
                Console.WriteLine($"Item with ID {itemId} not found");
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    private async Task ConfirmUpdate()
    {
        msg = "";
        if (selectedItem.Price == null)
        {
            msg = "Price cannot be empty!";
            return;
        }
        if (selectedItem.Stock == null)
        {
            msg = "Stock cannot be empty!";
        }
        try
        {
            UpdateItemDto item = new(selectedItem.ItemId, selectedItem.Price,
                selectedItem.Stock);
            await itemService.UpdateItem(item);
            toastService.ShowSuccess("Item details changed succesfully: " + selectedItem.Name);
            showModal = false;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private void CloseModal()
    {
        showModal = false;
    }

}}