@page "/AdminViewItems"
@using Blazor.Services.Interfaces
@using Domain.DTOs
@using Domain.Models
@inject IItemService itemService


<h3>Manage Items</h3>
@if (items == null)
{
    <p>Loading...</p>
}
else if (!items.Any())
{
    <p>No Items to display</p>
}
else
{
    <table class="item-table">
        <thead>
        <tr>
            <th>Name</th>
            <th >Stock</th>
            <th class = "managecol">Manage</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in items)
        {
            <tr>
                <td>@item.Name</td>
                <td>@item.Stock </td>
                <td>
                    <button class="manage" @onclick="(e) => OpenManage(item)">Manage</button>
                    <button class="delete" @onclick="(e) => Delete()">Delete</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
    
}

@if (showModal)
 {
     <Modal ShowModal="showModal">
         <div class="card">
             @if (items == null)
             {
                 <label>Loading items...</label>
             }
             else if (!items.Any())
             {
                 <label>No items</label>
             }
             else if (Item == null)
             {
                 <label>Loading Items data..</label>
             }
             else
             {
                 <div class = "item-modal">
                 <h3>@Item.Name</h3>
                     <div class="form-group field">
                         <label>@Item.Description</label>
                         <div class="field">
                             <label>@Item.Category</label>
                             <select>
                                     <option value="">Select Category</option>
                                     <option value="CPU">CPU</option>
                                     <option value="GPU">GPU</option>
                                     <option value="Motherboard">Motherboard</option>
                                     <option value="RAM">RAM</option>
                                     <option value="CPU Cooler">CPU Cooler</option>
                                     <option value="SSD">SSD</option>
                                     <option value="HDD">HDD</option>
                                     <option value="PSU">PSU</option>
                                     <option value="Case">Case</option>
                         </select>
                             </div>
                         
                         <label>@Item.Price</label>
                         <label>@Item.Stock</label>
                     </div>
                     </div>
             }
             @if (!string.IsNullOrEmpty(msg))
             {
                 <label style="color: red">@msg</label>
             }
             
             <button class="btn btn-secondary close-button" @onclick="CloseModal">Close</button>
         </div>
     </Modal>
 } 


@code {
    private IEnumerable<Item>? items;
    private string msg = "";
    private bool showModal = false;
    private Item Item = null!;
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            items = await itemService.GetAsync();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private async Task OpenManage(Item item)
    {
        msg = "";
        try
        {
            Item result = await itemService.GetItemById(item.ItemId);
            showModal = true;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }
    
    private void CloseModal()
    {
        showModal = false;
    }

    private void Delete()
    {
        
    }
    
}